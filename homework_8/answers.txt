1) Что такое "состояние гонки" и к чему оно может привести?

Гонка за данными - проблема, возникающая, когда сразу несколько потоков работают с одним ресурсом
и в одно и то же время обращаются к одинаковым данным. Это может приводить, например, к "грязному чтению":
у структуры (класса) есть какой-то инвариант, который может обновляться, но в процессе его обновления одним из потоков
другой поток может считать данные ещё не полностью модифицированной структуры (класса) (до завершения работы 1ого потока),
вследствие чего второй поток будет нести искажённую информацию об инварианте структуры (класса).


2) Как используют мьютексы и условные переменные?

Мьютексы и условные переменные используют для безопасного модифицирования общих данных как защитный механизм (примитив
синхронизации). Mutex - mutual exclusion - эксклюзивное предоставление данных одному потоку  (основные действия - lock,
unlock)

Условные переменные (condition variable) позволяют блокировать один или более потоков, пока либо не будет получено извещение
от другого потока (произойдёт событие), либо не произойдёт ложное пробуждение (spurious wakeup)



3) На что влияет выбор гранулярности блокировки?

Гранулярность блокировки влияет на время работы (и эффективность) программы в целом и взаимодействия с данными в частности.
К примеру, если два потока с разных концов обходят deque, то нет смысла делать одну глобальную блокировку всего контейнера:
необходимо разбить его на удобные разные "узлы" для увеличения производительности.



4) Когда возникает взаимоблокировка (deadlock) и как её предотвратитть?

Пусть у нас есть deque и с разных концов один и второй потоки блокируют ячейки по-одной. Тогда при встрече в середине возникнет
проблема: оба потока застопорятся, пытаясь заблокировать уже заблокированные потоки.

Решение проблемы:
1) Использование одновременного захвата std::lock (scoped_lock)
2) Выставление приоритетов std::mutex
3) Одинаковый порядок захвата


5) Что есть атомарная операция и атомарный тип данных?

Атомарная операция - операция, которая либо выполняется целиком, либо не выполняется вовсе; операция, которая не может быть
частично выполнена и частично не выполнена. (транзакционное поведение)

Атомарный тип данных - неделимый, не "составной" тип данных, работающий с атомарными операциями (обеспечивается безвредная
"гонка за данными" при работе с ячейками памяти)