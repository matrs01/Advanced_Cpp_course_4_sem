1. Когда используюся контейнеры типа (мульти) множества и отображение?
(мульти) множества ((multi_)set и (multi_)map) хранят объекты в упорядоченном по выбраннному
признаку порядке и обеспецивают доступ, вставку и удаление элемента за O(logn).
(мульти) отображения ((multi_)unordered_set и (multi_)unordered_map) хранят объекты в неупорядоченном
(случайном) порядке, зато обеспечивают доступ, вставку и удаление элемента за O(1) при малом количестве
коллизий.
(multi_) позволяет хранить элементы с одинаковыми ключами.

2. Каким требованием должна удовлетворять качественная хэш-функция?
- детерминированность, то есть однозначное соответствие хэш-кода объекту
- быстрота вычисления (может зависеть от размера объекта, но не должна зависеть от количество
объектов в контейнере)
- равномерность распределения хэш-кодов (минимум коллизий)

3. Из-за чего в хэш-таблицах возникают коллизии и как можно их разрешать?
Коллизии возникают при добавлении двух или более объектов с одинаковым хэш-кодом. Их можно
раврешить многими способами, например, можно каждому хэш-коду сопоставлять контейнер для
хранения объектов (метод "цепочек"), или можно класть объект в ближайшую свободную ячейку
хэш-таблицы (например, искать ближайшую свободную ячейку, увеличивая хэш-код на 1)
(метод открытой адресации).

4. Почему сложность основных операций хэш-таблиц в худшем случае O(N)?
Потому что возможен вариант, когда у всех объектов в таблице одинаковый хэш-код (т.к. плохая хэш-
функция). В таком случае, решив коллизии описанными выше методами, придется искать нужный объект
перебором всех добавленных, то есть за O(n).

5. Что позволяет сделать инструмент создания контейнеров Boost.Multiindex?
Данные хранятся в одном контейнере, а индексы хранятся в разном виде, что позволяет получать
функционал различных контейнеров. Требует дополнительные затраты памяти (на хранение индексов).