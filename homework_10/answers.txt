1. Какие уровни входят в модель OSI и за что они отвечают?

    1 уровень. Физический (physical).
    Единицей нагрузки (PDU) здесь является бит. На этом уровне работают физические объекты, такие как провода.

    2 уровень. Канальный (data link).
    На этом уровне появляется адресация. Адресом является MAC адрес. Канальный уровень ответственен за доставку
    кадров адресату и их целостность. Адресация второго уровня работает только в пределах одного сетевого сегмента
    и ничего не знает о маршрутизации - этим занимается вышестоящий уровень.

    3 уровень. Сетевой (network).
    Наиболее распространенным протоколом тут является IP. Адресация происходит по
    IP-адресам. Протокол маршрутизируемый, то есть пакет способен попасть в любую часть сети через какое-то
    количество маршрутизаторов. На этом уровне работают маршрутизаторы.

    4 уровень. Транспортный (transport).
    На этом уровне появляются понятия портов. Тут работают TCP и UDP. Протоколы этого уровня отвечают за прямую
    связь между приложениями и за надежность доставки информации. Например, TCP умеет запрашивать повтор передачи
    данных в случае, если данные приняты неверно или не все. Так же TCP может менять скорость передачи данных,
    если сторона приема не успевает принять всё.

    5 уровень. Сеансовый (session).
    Управляет сеансом связи, обменом информации, правами. Протоколы - L2TP, PPTP.

    6 уровень. Представительский (presentation).
    Преставление и шифрование данных. JPEG, ASCII, MPEG.

    7 уровень. Прикладной (application).
    Самый многочисленный и разнообразный уровень. На нем выполняются все высокоуровненвые протоколы.
    Такие как POP, SMTP, RDP, HTTP и т.д. Протоколы здесь не должны задумываться о маршрутизации или гарантии
    доставки информации - этим занимаются нижестоящие уровни. На 7 уровне необходима лишь реализации конкретных
    действий, например получение html-кода или email-сообщения конкретному адресату.

2. Перечислите основные особенности протоколов TCP и UDP?
Свойства TCP:
- надежный, гарантирует доставку сообщений, обрабатывает ошибки
- требует установки лгочиского соединения
- режим соединения один с одним
- потокоориентирован, данные - поток байт

Свойства UDP:
- ненадежный, нет гарантии доставки сообщений, нет error-fix
- не требует установки логического соединения
- режим соединения один ко многим и один с одним
- ориентирован на сообщения

3. Какие данные необходимы для сетевого взаимодействия?
Для осуществление сетевого взаимодействия необходимо знать IP-адрес устройства, с которым необходимо установить
соединение, а также его порт, который будет прослушиваться нужной программой. То есть в итоге, так как связь
устанавливается между двумя устройствами, нужно знать 2 IP-адреса и 2 номера порта (для каждого устройства по 1).

4. Какие функции выполняют пассивные и активные сокеты?
Аткивный сокет.
Активный сокет подключен к удаленному активному сокету через открытое соединение для передачи данных. Если
это соединение будет закрыто, активные сокеты в каждой точке также будут уничтожены. Это используется клиентами,
которые хотели бы инициировать запросы на подключение. Однако этот активный сокет также может быть преобразован
в пассивный сокет путем привязки имени к сокету с помощью макроса bind и указания готовности принимать
соединения с макросом listen.

Пассивный сокет.
Этот сокет не подключен ни к какому другому сокету, но вместо этого ожидает входящего соединения, которое
породит новый активный сокет. Это используется серверами для того, чтобы принимать запросы на подключение с
помощью макроса connect. Этот пассивный сокет не может использоваться для инициирования запросов на подключение.


5. Как устанавливается логическое соединение протокола TCP?
На стороне сервера создается пассивный сокет, который с помощью функции listen ждет запросы на подключение.
На стороне клиента создается объект endpoint, который содержит информацию об IP-адресе сервера и о нужном
порте для подключения. Далее создается активный сокет и отправляется запрос на подключение
с помощью метода connect. Acceptor сервера принимает этот запрос и создает активный сокет для установления
логической связи с клиентом. Затем сервер отправляет клиенту ответ "готов", после чего клиент должен также
отправить серверу ответ "готов".