1) Как организован механизм генерации случайных чисел в библиотеке рандом?

В библиотеке random используются 16 генераторов, каждый из них имеет внутреннее состояние,
которое каждый раз меняется при созданием генератора случайного значения;
начальное состояние генератора задаётся при помощи seed. Полученное случайное значение
подвергается распределению (равномерному, Бернулли и тд) и на выходе получаем случайное число.


2) Чем отличаются функциональные объекты от функций и лямбда-выражений?

Лямбда-выражения - локальные безымянные функции, их можно создавать прямо внутри каких-либо
выражений + есть захват переменных по значению или по ссылке

Функциональный объект - конструкция, позволяющая использовать объект в качестве функции (в
С++ Ф.О. - это класс (структура), у которого перегружен оператор () ). В отличие от функции
функциональный объект может иметь состояние - данные-члены. Ф.О. имеет тип, можно создавать
его различные экземпляры + Ф.о. работает быстрее функции, переданной через указатель.


3) Какими наборами возможностей обладают итераторы различных категорий?

Input и Output Iterator (==; !=; ++; =; *) (первый - для чтения, второй - для записи)
Forward Iterator (все свойства предыдущих + многопроходность)
Bidirectional Iterator (все свойства предыдущего и --)
Random_Access Iterator (все свойства предыдущего, <, >, +-n (больше чем "единичные" перемещения))

4) Какая классификация предлагается для алгоритмов стандартной библиотеки?

-немодифицирующие (std::for_each; std::count_if; std::minmax_element; std::find_if)
-модифицирующие (std::copy; std::transform; std::iota; std::for_each; std::fill; std::copy_if;
std::unique_copy; std::generate; std::replace_if)
-удаления(std::remove_if; std::unique; std::erase)
-перестановки(std::reverse; std::shuffle; std::rotate)
-сортировки(std::nth_element; std::sort; std::stable_sort)
-для упорядоченных диапазонов (std::binary_search; std::lower_bound; std::upper_bound; std::equal_range)
-численные алгоритмы (std::accumulate)

5) Почему алгоритмы стандартной библиотеки предпочтительнее собственных?
Алгоритмы стандартной библиотеки предпочтительнее из-за более оптимальной реализации, они быстрые и наиболее
простые, кроме того использование алгоритмов стандартной библиотеки упрощает код, делает его понятнее.
Собственные циклы следует писать только в особенных случаях, когда нет подходящих алгоритмов из стандартной
библиотеки.




