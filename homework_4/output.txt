Создаем последовательность p1 чисел от 1 до 10.
p1: 1 2 3 4 5 6 7 8 9 10 
Добавим в p1 несколько чисел из cin (чтобы остановить ввод, введите не int).
p1: 1 2 3 4 5 6 7 8 9 10 
Перемешаем p1 случайным образом.
p1: 3 5 9 8 7 10 1 4 6 2 
Удалим дубликаты из p1.
p1: 1 2 3 4 5 6 7 8 9 10 
Подсчитаем количество нечетных чисел в p1.
5
Определим минимальный и максимальный элеиент в p1.
min value: 1; max value: 10
Найдем простые числа в p1.
2 3 5 7 
Заменим все числа в p1 их квалратами.
1 4 9 16 25 36 49 64 81 100 
Создадим последовательность p2 из N случайных чисел, где N - длина p1.
p2: -15 33 -75 -55 -31 9 59 32 -45 -20 
Вычислим сумму чисел в p2.
p2 sum: -108
Заменим первые 3 числа в p2 единицей.
p2: 1 1 1 -55 -31 9 59 32 -45 -20 
Создадим последовательномть p3 как разность p1 и p2.
p1: 1 4 9 16 25 36 49 64 81 100 
p2: 1 1 1 -55 -31 9 59 32 -45 -20 
p3: 0 3 8 71 56 27 -10 32 126 120 
Заменим каждый отрицательный элемент в p3 нулем.
p3: 0 3 8 71 56 27 0 32 126 120 
Удалим все нулевые элементы из p3.
p3: 3 8 71 56 27 32 126 120 
Изменим порядок следования элементов в p3 на обратный.
p3: 120 126 32 27 56 71 8 3 
Определим быстро топ-3 наибольших элемента в p3.
71 120 126 
Отсортируем полностью p1 и p2 по возрастанию.
p1: 1 4 9 16 25 36 49 64 81 100 
p2: -55 -45 -31 -20 1 1 1 9 32 59 
Создадим последовательность p4 как слияние p1 и p2.
p4: -55 -45 -31 -20 1 1 1 1 4 9 9 16 25 32 36 49 59 64 81 100 
Определим диапазон для упорядоченной вставки числа 1 в p4
[lower_bound, upper_bound] = [4, 8]
Выведем все последовательности в cout.
p1: 1 4 9 16 25 36 49 64 81 100 
p2: -55 -45 -31 -20 1 1 1 9 32 59 
p4: 3 8 27 32 56 71 120 126 
Определим количество сравнений в алгоритмах std::sort и std::nth_element.
