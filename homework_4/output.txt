Создаем последовательность p1 чисел от 1 до 10.
p1: 1 2 3 4 5 6 7 8 9 10 
Добавим в p1 несколько чисел из cin (чтобы остановить ввод, введите не int).
p1: 1 2 3 4 5 6 7 8 9 10 
Перемешаем p1 случайным образом.
p1: 2 10 6 5 9 3 8 1 4 7 
Удалим дубликаты из p1.
p1: 1 2 3 4 5 6 7 8 9 10 
Подсчитаем количество нечетных чисел в p1.
5
Определим минимальный и максимальный элеиент в p1.
min value: 1; max value: 10
Найдем первое простое число в p1.
2
Заменим все числа в p1 их квалратами.
1 4 9 16 25 36 49 64 81 100 
Создадим последовательность p2 из N случайных чисел, где N - длина p1.
p2: -8 -37 92 57 48 1 5 72 -34 25 
Вычислим сумму чисел в p2.
p2 sum: 221
Заменим первые 3 числа в p2 единицей.
p2: 1 1 1 57 48 1 5 72 -34 25 
Создадим последовательномть p3 как разность p1 и p2.
p1: 1 4 9 16 25 36 49 64 81 100 
p2: 1 1 1 57 48 1 5 72 -34 25 
p3: 0 3 8 -41 -23 35 44 -8 115 75 
Заменим каждый отрицательный элемент в p3 нулем.
p3: 0 3 8 0 0 35 44 0 115 75 
Удалим все нулевые элементы из p3.
p3: 3 8 35 44 115 75 
Изменим порядок следования элементов в p3 на обратный.
p3: 75 115 44 35 8 3 
Определим быстро топ-3 наибольших элемента в p3.
44 75 115 
Отсортируем полностью p1 и p2 по возрастанию.
p1: 1 4 9 16 25 36 49 64 81 100 
p2: -34 1 1 1 1 5 25 48 57 72 
Создадим последовательность p4 как слияние p1 и p2.
p4: -34 1 1 1 1 1 4 5 9 16 25 25 36 48 49 57 64 72 81 100 
Определим диапазон для упорядоченной вставки числа 1 в p4
[lower_bound, upper_bound] = [1, 6]
Выведем все последовательности в cout.
p1: 1 4 9 16 25 36 49 64 81 100 
p2: -34 1 1 1 1 5 25 48 57 72 
p4: 3 8 35 44 75 115 
Определим количество сравнений в алгоритмах std::sort и std::nth_element.
