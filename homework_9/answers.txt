1. Какие средства используются для организации межпроцессного взаимодействия?

1) Обмен информации посредством файловой системы, процессы используют стандартные механизмы чтения-записи.
2) Выделение общей памяти. Операционная система ассоциирует адресное пространство процессов с
   областю их разделяемой памяти или создаются специальные memory mapped файлы, задающие отображение
   между адресным пространством процессов и своим содержимым.
3) Посредством ядра ОС.

Первые два метода требуют синхронизации, чтобы избежать случаев одновременного чтения и записи данных.
Синхронизация третьим методом гарантируется ОС.

Например, в бусте 2-ое средство может быть реализовано посредством
boost/interprocess/managed_shared_memory.hpp
boost/interprocess/shared_memory_object.hpp
boost/interprocess/file_mapping.hpp

2. Чем файлы, отображаемые в память, отличаются от разделяемой памяти?

Время жизни файлов задается файловой системой, а время жизни разделяемой памяти зависит от состояния
ОС, причем на Windows время их жизни одинаково, так как для разделяемой памяти создается временный
файл, возможно в C:\ProgramData.
Разделяемая память обычно быстрее, а memory mapped файлы позволяют эффективно работать
с большими файлами. Также memory mapped файлы позволяют использовать для памяти и файлов одни функции.

3. Что необходимо учитывать при создании контейнеров в разделяемой памяти?

Необходимо учитывать, что для них нужен специальный аллокатор, выделяющий память именно в
разделяемой памяти. Ну и стандартные контейнеры не подходят, нужно использовать межпроцессорные контейнеры
из буста, так как в стандартной библиотеке в реализации алгоритмов используются неподходящие указатели.
Нужно также не забывать, что при создании контейнеров в разделяемой памяти в качестве аргумента необходимо
передавать segment manager, чтобы связать аллокатор с участком памяти.

4. Чем отличаются анонимные и именованные примитивы синхронизации?

Объект анонимного примитива синхронизации хранится в общей памяти. Информация о них передается
с помощью разделяемой памяти или memory mapped файлов.

Именованные примитивы имеют собственный индентификатор, по которому процессы получают с помощью разных
объектов информацию об одном и том же системном ресурсе нужном для синхронизации. Для именованных примитивов
не нужно выделять общую память.

5. Как могут быть использованы библиотеки динамической компоновки DLL?

Первоначально они планировались использоваться для экономии памяти путем хранения одних и тех же файлов
с библиотекой для многих программ, но эта тема не прокатила, так как разные программы требовали разные
версии библиотек.
Сейчас DLL используются для подгрузки во время работы программы (а не во время компиляции) библиотек, что
позволяет разделить программу на отдельные компоненты, которые можно будет менять без необходимости
перекомпилировать и переустанавливать программу.