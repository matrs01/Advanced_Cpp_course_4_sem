1) Что такое контекстное переключение?

Иногда для реализации одной из задач требуется результат другой, при этом мы имеем лишь одного исполнителя.
Тогда он обязан сохранить состояние текущей задачи, сохранить счётчик команд, определить задачу, которую он
хочет начать исполнять и загрузить её состояние. Данный процесс называется контекстным переключением задач.

2) Назовите основные подходы к организации параллелизма.

Первый подход - процессы, по факту - несколько отдельных программ. Каждый процесс имеет свой поток, при этом
их адресные пространства различны, что обеспечивает безопасность такого подхода. Взаимодействие между процесами
регулирует ОС, либо сеть. Недостатки такого подхода заключаются в медленности (при взаимодействии), затратности
и сложности.

Второй подход - создание множества потоков в одном процессе с общим адресным пространством, при этом получаем
быстродейсвующую, простую и малозатратную систему с той оговоркой, что грамотно налажена синхронизация потоков,
иначе будет беда с данными. Слишком много потоков - также является плохой идеей, так как возрастает количество
контекстных переключений и растёт затратность по времени.

3) Что может влиять на производительность параллельных алгоритмов?

На их производительность может влиять оптимальность разбиения основной задачи на подзадачи и на работу с
отдельными блоками данных: при этом минимизация контекстных переключенй приводит к увеличению производительности
программы. Подробнее: производительность определяют количество исполнителей, конкуренция за данные, проблема
"ложного разделения", масштабируемость (и закон Амдала)


4) Как в стандартной библиотеке реализована концепция асинхронного исполнения?

Асинхронная концепция программирования заключается в том, что результат выполнения функции доступен не сразу же,
а через некоторое время в виде некоторого асинхронного (нарушающего обычный порядок выполнения) вызова. Основная
идея: запускать отдельные вызовы методов и параллельно продолжать выполнять другую работу без ожидания окончания
вызовов. В STD данная концепция реализована при помощи std::future.




5) Что нужно учитывать при замене последовательной реализации алгоритма на параллельную?

Важно учитывать объём вычислений, так как простые опрации последовательный алгоритм может выплнить гораздо быстрее
параллельного, который ожидает доступа к памяти и т.п. Нужно проводить непосредственные замеры времени работы обеих
версий.