1) Как организована иерархия классов потоков в библиотеке IOStream?
	
В библиотеке IOStream существует базовый класс ios_base, который определяет свойства всех потоковых классов,
не зависящие от свойств и типа символов. Этот класс также осуществляет контроль над флагами формата, состоянием,
локалями и т.д. 
От него имеется производный шаблонный класс basic_ios<>, который определяет свойсвта всех потоковых классов,
зависящие от типа и свойств соответствующих символов (ios, wios - специализации данного класса для char и wchar_t
соответственно). К свойствам символов также относится определение буфера - объекта, производного от basic_streambuf<>
класса, который выполняет операции чтения/записи.
Далее от basic_ios<>  виртуально наследуются шаблонные классы basic_istream<> и basic__ostream<>, которые определяют
объекты, использующиеся для чтения или записи соответственно. Специализации этих классов:
istream (объект класса: std::cin) и ostream (объект класса: std::cout/cerr/clog).
Шаблонный класс basic_iostream<> является производным классом от basic_istream<> и basic__ostream<>. Он определяет
объекты, которые могут использоваться как для чтения, так и для записи (специализация класса: iostream).
Шаблонный класс basic_streambuf<> определяет интерфейс для работы с операциями ввода-вывода.

2) Какие состояния потоков реализованы в базовом классе basic_ios?

    goodbit - всё в порядке, остальные биты сброшены
    eofbit - обнаружен конец файла
    failbit  - ошибка, сбой при выполнении операции ввода-вывода (операция выполнена неверно,
    но поток остался в исправном состоянии)
    badbit - фатальная ошибка, неопределённое состояние (устанавливается при повреждении потока или потере данных)

3) В чём разница между манипуляторами и флагами форматирования?

Манипуляторы позволяют менять состояние потока в определённом месте кода, тогда как флаги устанавливают глобальное состояние потока.


4) Из каких основных элементов состоят пути в файловой системе?

    путь: C:\Users\project\file.txt

    C: - root name, \ - root directory, C:\ - root path
    C:\Users\project\ - parent path
    file - stem, .txt - extension, file.txt - filename

5) Зачем нужны форматы обмена данными, такие как JSON и XML?
JSON как формат обмена данными нужен, например, для обеспечения взаимодействия между браузером и сервером (в веб- или
мобильных приложениях), между серверами
    
